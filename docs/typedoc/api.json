{
	"id": 0,
	"name": "@ganache/ethereum",
	"kind": 1,
	"kindString": "Project",
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "default",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 165,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 3,
							"name": "new default",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "This is the Ethereum API that the provider interacts with.\nThe only methods permitted on the prototype are the supported json-rpc\nmethods."
							},
							"parameters": [
								{
									"id": 4,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "-"
									},
									"type": {
										"type": "reference",
										"name": "EthereumInternalOptions"
									}
								},
								{
									"id": 5,
									"name": "wallet",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "-"
									},
									"type": {
										"type": "reference",
										"name": "default"
									}
								},
								{
									"id": 6,
									"name": "blockchain",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "default"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 1,
								"name": "default"
							}
						}
					]
				},
				{
					"id": 13,
					"name": "#blockchain",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 154,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "default"
					}
				},
				{
					"id": 10,
					"name": "#filters",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 151,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "Filter"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 7,
					"name": "#getId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 150,
							"character": 11
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 8,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 9,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Quantity"
									}
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 12,
					"name": "#options",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 153,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "EthereumInternalOptions"
					}
				},
				{
					"id": 11,
					"name": "#subscriptions",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 152,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "UnsubscribeFn"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 14,
					"name": "#wallet",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 155,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"name": "default"
					}
				},
				{
					"id": 33,
					"name": "bzz_hive",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 253,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 34,
							"name": "bzz_hive",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the kademlia table in a readable table format.",
								"returns": "Returns the kademlia table in a readable table format.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"bzz_hive\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 35,
					"name": "bzz_info",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 266,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 36,
							"name": "bzz_info",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns details about the swarm node.",
								"returns": "Returns details about the swarm node.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"bzz_info\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 29,
					"name": "db_getHex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 238,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 30,
							"name": "db_getHex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns binary data from the local database.",
								"returns": "The previously stored data.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"db_getHex\", [\"testDb\", \"testKey\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 31,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 32,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 20,
					"name": "db_getString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 205,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 21,
							"name": "db_getString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns string from the local database.",
								"returns": "The previously stored string.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"db_getString\", [\"testDb\", \"testKey\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 22,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 23,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 24,
					"name": "db_putHex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 222,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "db_putHex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stores binary data in the local database.",
								"returns": "true if the value was stored, otherwise false.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"db_putHex\", [\"testDb\", \"testKey\", \"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 26,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 27,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 28,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Data to store."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 15,
					"name": "db_putString",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 189,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 16,
							"name": "db_putString",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stores a string in the local database.",
								"returns": "returns true if the value was stored, otherwise false.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"db_putString\", [\"testDb\", \"testKey\", \"testValue\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 17,
									"name": "dbName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Database name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 18,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Key name."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 19,
									"name": "value",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "String to store."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 355,
					"name": "debug_storageRangeAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2720,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 356,
							"name": "debug_storageRangeAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempts to replay the transaction as it was executed on the network and\nreturn storage data given a starting key and max number of entries to return.",
								"returns": "Returns a storage object with the keys being keccak-256 hashes of the storage keys,\nand the values being the raw, unhashed key and value for that specific storage slot. Also\nreturns a next key which is the keccak-256 hash of the next key in storage for continuous downloading.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst initialTxHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\nconst {contractAddress} = await provider.request({ method: \"eth_getTransactionReceipt\", params: [initialTxHash] });\n\n// set value to 19\nconst data = \"0x552410770000000000000000000000000000000000000000000000000000000000000019\";\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to: contractAddress, data }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\nconst { blockHash, transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\nconst storage = await provider.request({ method: \"debug_storageRangeAt\", params: [blockHash, transactionIndex, contractAddress, \"0x01\", 1] });\nconsole.log(storage);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 357,
									"name": "blockHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a block."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 358,
									"name": "transactionIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer of the transaction index position."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 359,
									"name": "contractAddress",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address of the contract."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 360,
									"name": "startKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of the start key for grabbing storage entries."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 361,
									"name": "maxResult",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer of maximum number of storage entries to return."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "StorageRangeResult"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 351,
					"name": "debug_traceTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2670,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 352,
							"name": "debug_traceTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Attempt to run the transaction in the exact same manner as it was executed\non the network. It will replay any transaction that may have been executed\nprior to this one before it will finally attempt to execute the transaction\nthat corresponds to the given hash.",
								"text": "In addition to the hash of the transaction you may give it a secondary\noptional argument, which specifies the options for this specific call.\nThe possible options are:\n\n* `disableStorage`: \\{boolean\\} Setting this to `true` will disable storage capture (default = `false`).\n* `disableMemory`: \\{boolean\\} Setting this to `true` will disable memory capture (default = `false`).\n* `disableStack`: \\{boolean\\} Setting this to `true` will disable stack capture (default = `false`).\n",
								"returns": "Returns the `gas`, `structLogs`, and `returnValue` for the traced transaction.\n\nThe `structLogs` are an array of logs, which contains the following fields:\n* `depth`: The execution depth.\n* `error`: Information about an error, if one occurred.\n* `gas`: The number of gas remaining.\n* `gasCost`: The cost of gas in wei.\n* `memory`: An array containing the contract's memory data.\n* `op`: The current opcode.\n* `pc`: The current program counter.\n* `stack`: The EVM execution stack.\n* `storage`: An object containing the contract's storage data.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst transactionTrace = await provider.request({ method: \"debug_traceTransaction\", params: [txHash] });\nconsole.log(transactionTrace);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 353,
									"name": "transactionHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of the transaction to trace."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 354,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "See options in source."
									},
									"type": {
										"type": "reference",
										"name": "TransactionTraceOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TraceTransactionResult"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 249,
					"name": "eth_accounts",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1389,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 250,
							"name": "eth_accounts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list of addresses owned by client.",
								"returns": "Array of 20 Bytes - addresses owned by the client.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst accounts = await provider.request({ method: \"eth_accounts\", params: [] });\nconsole.log(accounts);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 251,
					"name": "eth_blockNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1403,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 252,
							"name": "eth_blockNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of the most recent block.",
								"returns": "The current block number the client is on.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst blockNumber = await provider.request({ method: \"eth_blockNumber\" });\nconsole.log(blockNumber);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 347,
					"name": "eth_call",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2520,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 348,
							"name": "eth_call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Executes a new message call immediately without creating a transaction on the block chain.",
								"text": "Transaction call object:\n* `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n* `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n* `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n* `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n* `value`: `QUANTITY` (optional) - Integer of the value in wei.\n* `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n",
								"returns": "The return value of executed contract.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst txObj = { from, gas: \"0x5b8d80\", gasPrice: \"0x1dfd14000\", value:\"0x0\", data: simpleSol };\nconst result = await provider.request({ method: \"eth_call\", params: [txObj, \"latest\"] });\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 349,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The transaction call object as seen in source."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								},
								{
									"id": 350,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer block number, or the string \"latest\", \"earliest\"\n or \"pending\".\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "Tag.LATEST"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 253,
					"name": "eth_chainId",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1420,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 254,
							"name": "eth_chainId",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the currently configured chain id, a value used in\nreplay-protected transaction signing as introduced by EIP-155.",
								"returns": "The chain id as a string.",
								"tags": [
									{
										"tag": "eip",
										"text": "[155 – Simple replay attack protection](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md)\n"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconst chainId = await provider.send(\"eth_chainId\");\nconsole.log(chainId);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 101,
					"name": "eth_coinbase",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 878,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 102,
							"name": "eth_coinbase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the client coinbase address.",
								"returns": "The current coinbase address.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst coinbaseAddress = await provider.request({ method: \"eth_coinbase\" });\nconsole.log(coinbaseAddress);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Address"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 93,
					"name": "eth_estimateGas",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 785,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 94,
							"name": "eth_estimateGas",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates and returns an estimate of how much gas is necessary to allow the\ntransaction to complete. The transaction will not be added to the\nblockchain. Note that the estimate may be significantly more than the\namount of gas actually used by the transaction, for a variety of reasons\nincluding EVM mechanics and node performance.",
								"text": "Transaction call object:\n* `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n* `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n* `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n* `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n* `value`: `QUANTITY` (optional) - Integer of the value in wei.\n* `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n",
								"returns": "The amount of gas used.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst gasEstimate = await provider.request({ method: \"eth_estimateGas\", params: [{ from, to }, \"latest\" ] });\nconsole.log(gasEstimate);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 95,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The transaction call object as seen in source."
									},
									"type": {
										"type": "reference",
										"name": "TypedRpcTransaction"
									}
								},
								{
									"id": 96,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer block number, or the string \"latest\", \"earliest\"\n or \"pending\".\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "Tag.LATEST"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 245,
					"name": "eth_gasPrice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1361,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 246,
							"name": "eth_gasPrice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current price per gas in wei.",
								"returns": "Integer of the current gas price in wei.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst gasPrice = await provider.request({ method: \"eth_gasPrice\", params: [] });\nconsole.log(gasPrice);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 255,
					"name": "eth_getBalance",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1440,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 256,
							"name": "eth_getBalance",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the balance of the account of given address.",
								"returns": "Integer of the account balance in wei.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst accounts = await provider.request({ method: \"eth_accounts\", params: [] });\nconst balance = await provider.request({ method: \"eth_getBalance\", params: [accounts[0], \"latest\"] });\nconsole.log(balance);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 257,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address to check for balance."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 258,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer block number, or the string \"latest\", \"earliest\"\n or \"pending\".\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "Tag.LATEST"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 129,
					"name": "eth_getBlockByHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 976,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 130,
							"name": "eth_getBlockByHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a block by block hash.",
								"returns": "The block, `null` if the block doesn't exist.\n\n* `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n* `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n* `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n* `miner`: `DATA`, 20 Bytes -  Address of the miner.\n* `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n* `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n* `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n* `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n* `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n* `number`: `QUANTITY` - The block number. `null` when pending.\n* `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n* `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n* `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n* `extraData`: `DATA` - Extra data for the block.\n* `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n* `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n* `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n* `size`: `QUANTITY` - Integer the size of the block in bytes.\n* `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n* `uncles`: `Array` - Array of uncle hashes.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\nconst block = await provider.request({ method: \"eth_getBlockByHash\", params: [txReceipt.blockHash, true] });\nconsole.log(block);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 131,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a block."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 132,
									"name": "transactions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "If `true` it returns the full transaction objects, if `false` only the hashes of the\ntransactions."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 133,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 153,
													"name": "baseFeePerGas",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 43,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 144,
													"name": "difficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 34,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 150,
													"name": "extraData",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 40,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 147,
													"name": "gasLimit",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 37,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 148,
													"name": "gasUsed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 38,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 154,
													"name": "hash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 44,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 143,
													"name": "logsBloom",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 33,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 139,
													"name": "miner",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 29,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 151,
													"name": "mixHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 41,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 152,
													"name": "nonce",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 42,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 146,
													"name": "number",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 36,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 137,
													"name": "parentHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 27,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 142,
													"name": "receiptsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 32,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 138,
													"name": "sha3Uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 28,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 134,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 24,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 140,
													"name": "stateRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 30,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 149,
													"name": "timestamp",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 39,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 145,
													"name": "totalDifficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 35,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 135,
													"name": "transactions",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 25,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "reference",
																	"name": "LegacyTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP2930AccessListTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP1559FeeMarketTransactionJSON"
																}
															]
														}
													}
												},
												{
													"id": 141,
													"name": "transactionsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 31,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 136,
													"name": "uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 26,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														153,
														144,
														150,
														147,
														148,
														154,
														143,
														139,
														151,
														152,
														146,
														137,
														142,
														138,
														134,
														140,
														149,
														145,
														135,
														141,
														136
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 103,
					"name": "eth_getBlockByNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 918,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 104,
							"name": "eth_getBlockByNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a block by block number.",
								"returns": "The block, `null` if the block doesn't exist.\n\n* `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n* `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n* `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n* `miner`: `DATA`, 20 Bytes -  Address of the miner.\n* `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n* `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n* `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n* `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n* `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n* `number`: `QUANTITY` - The block number. `null` when pending.\n* `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n* `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n* `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n* `extraData`: `DATA` - Extra data for the block.\n* `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n* `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n* `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n* `size`: `QUANTITY` - Integer the size of the block in bytes.\n* `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n* `uncles`: `Array` - Array of uncle hashes.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst block = await provider.request({ method: \"eth_getBlockByNumber\", params: [\"0x0\", false] });\nconsole.log(block);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 105,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer of a block number, or the string \"earliest\", \"latest\" or \"pending\", as in the\ndefault block parameter."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 106,
									"name": "transactions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "If `true` it returns the full transaction objects, if `false` only the hashes of the\ntransactions."
									},
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"defaultValue": "false"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 107,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 127,
													"name": "baseFeePerGas",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 43,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 118,
													"name": "difficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 34,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 124,
													"name": "extraData",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 40,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 121,
													"name": "gasLimit",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 37,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 122,
													"name": "gasUsed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 38,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 128,
													"name": "hash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 44,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 117,
													"name": "logsBloom",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 33,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 113,
													"name": "miner",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 29,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 125,
													"name": "mixHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 41,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 126,
													"name": "nonce",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 42,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 120,
													"name": "number",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 36,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 111,
													"name": "parentHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 27,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 116,
													"name": "receiptsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 32,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 112,
													"name": "sha3Uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 28,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 108,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 24,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 114,
													"name": "stateRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 30,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 123,
													"name": "timestamp",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 39,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 119,
													"name": "totalDifficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 35,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 109,
													"name": "transactions",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 25,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "reference",
																	"name": "LegacyTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP2930AccessListTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP1559FeeMarketTransactionJSON"
																}
															]
														}
													}
												},
												{
													"id": 115,
													"name": "transactionsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 31,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 110,
													"name": "uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 26,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														127,
														118,
														124,
														121,
														122,
														128,
														117,
														113,
														125,
														126,
														120,
														111,
														116,
														112,
														108,
														114,
														123,
														119,
														109,
														115,
														110
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 158,
					"name": "eth_getBlockTransactionCountByHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1032,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 159,
							"name": "eth_getBlockTransactionCountByHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of transactions in a block from a block matching the given block hash.",
								"returns": "Number of transactions in the block.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\nconst txCount = await provider.request({ method: \"eth_getBlockTransactionCountByHash\", params: [txReceipt.blockHash] });\nconsole.log(txCount);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 160,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a block."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 155,
					"name": "eth_getBlockTransactionCountByNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 995,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 156,
							"name": "eth_getBlockTransactionCountByNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of transactions in a block from a block matching the given block number.",
								"returns": "Integer of the number of transactions in the block.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst txCount = await provider.request({ method: \"eth_getBlockTransactionCountByNumber\", params: [\"0x0\"] });\nconsole.log(txCount);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 157,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 259,
					"name": "eth_getCode",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1479,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 260,
							"name": "eth_getCode",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns code at a given address.",
								"returns": "The code from the given address.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\nconst code = await provider.request({ method: \"eth_getCode\", params: [txReceipt.contractAddress, \"latest\"] });\nconsole.log(code);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 261,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 262,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer block number, or the string \"latest\", \"earliest\" or \"pending\"."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "Tag.LATEST"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 161,
					"name": "eth_getCompilers",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1054,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 162,
							"name": "eth_getCompilers",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a list of available compilers.",
								"returns": "List of available compilers.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst compilers = await provider.send(\"eth_getCompilers\");\nconsole.log(compilers);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 311,
					"name": "eth_getFilterChanges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2324,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 312,
							"name": "eth_getFilterChanges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Polling method for a filter, which returns an array of logs, block hashes,\nor transaction hashes, depending on the filter type, which occurred since\nlast poll.",
								"returns": "An array of logs, block hashes, or transaction hashes, depending\non the filter type, which occurred since last poll.\n\nFor filters created with `eth_newBlockFilter` the return are block hashes (`DATA`, 32 Bytes).\n\nFor filters created with `eth_newPendingTransactionFilter` the return are transaction hashes (`DATA`, 32 Bytes).\n\nFor filters created with `eth_newFilter` the return are log objects with the following parameters:\n* `removed`: `TAG` - `true` when the log was removed, `false` if its a valid log.\n* `logIndex`: `QUANTITY` - Integer of the log index position in the block. `null` when pending.\n* `transactionIndex`: `QUANTITY` - Integer of the transactions index position. `null` when pending.\n* `transactionHash`: `DATA`, 32 Bytes - Hash of the transaction where the log was. `null` when pending.\n* `blockHash`: `DATA`, 32 Bytes - Hash of the block where the log was. `null` when pending.\n* `blockNumber`: `QUANTITY` - The block number where the log was in. `null` when pending.\n* `address`: `DATA`, 20 Bytes - The address from which the log originated.\n* `data`: `DATA` - Contains one or more 32 Bytes non-indexed arguments of the log.\n* `topics`: `Array of DATA` - Array of 0 to 4 32 Bytes `DATA` of indexed log arguments.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Logs.sol\n// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.7.4;\n// contract Logs {\n//   event Event(uint256 indexed first, uint256 indexed second);\n//   constructor() {\n//     emit Event(1, 2);\n//   }\n//\n//   function logNTimes(uint8 n) public {\n//     for (uint8 i = 0; i < n; i++) {\n//       emit Event(i, i);\n//     }\n//   }\n// }\n\nconst logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\nconst [from] = await provider.send(\"eth_accounts\");\nconst filterId = await provider.send(\"eth_newFilter\");\n\nconst subscriptionId = await provider.send(\"eth_subscribe\", [\"newHeads\"]);\nawait provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\nawait provider.once(\"message\");\n\nconst changes = await provider.request({ method: \"eth_getFilterChanges\", params: [filterId] });\nconsole.log(changes);\n\nawait provider.send(\"eth_unsubscribe\", [subscriptionId]);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 313,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter id."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"name": "Data"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 317,
					"name": "eth_getFilterLogs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2394,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 318,
							"name": "eth_getFilterLogs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array of all logs matching filter with given id.",
								"returns": "Array of log objects, or an empty array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Logs.sol\n// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.7.4;\n// contract Logs {\n//   event Event(uint256 indexed first, uint256 indexed second);\n//   constructor() {\n//     emit Event(1, 2);\n//   }\n//\n//   function logNTimes(uint8 n) public {\n//     for (uint8 i = 0; i < n; i++) {\n//       emit Event(i, i);\n//     }\n//   }\n// }\n\nconst logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\nconst [from] = await provider.send(\"eth_accounts\");\nconst filterId = await provider.send(\"eth_newFilter\");\n\nawait provider.send(\"eth_subscribe\", [\"newHeads\"]);\nawait provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\nawait provider.once(\"message\");\n\nconst logs = await provider.request({ method: \"eth_getFilterLogs\", params: [filterId] });\nconsole.log(logs);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 319,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter id."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 320,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 321,
														"name": "address",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 121,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Address"
														}
													},
													{
														"id": 322,
														"name": "blockHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 122,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 323,
														"name": "blockNumber",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 123,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 324,
														"name": "data",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 124,
																"character": 8
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 325,
														"name": "logIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 125,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 326,
														"name": "removed",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 126,
																"character": 8
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "boolean"
														}
													},
													{
														"id": 327,
														"name": "topics",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 127,
																"character": 8
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 328,
														"name": "transactionHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 128,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 329,
														"name": "transactionIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 129,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"kind": 1024,
														"children": [
															321,
															322,
															323,
															324,
															325,
															326,
															327,
															328,
															329
														]
													}
												]
											}
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 330,
					"name": "eth_getLogs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2451,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 331,
							"name": "eth_getLogs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an array of all logs matching a given filter object.",
								"text": "Filter options:\n* `fromBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\nor \"pending\".\n* `toBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\nor \"pending\".\n* `address`: `DATA | Array` (optional) - Contract address or a list of addresses from which the logs should originate.\n* `topics`: `Array of DATA` (optional) - Array of 32 Bytes `DATA` topcis. Topics are order-dependent. Each topic can also\nbe an array of `DATA` with \"or\" options.\n* `blockHash`: `DATA`, 32 Bytes (optional) - Hash of the block to restrict logs from. If `blockHash` is present,\nthen neither `fromBlock` or `toBlock` are allowed.\n",
								"returns": "Array of log objects, or an empty array.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Logs.sol\n// // SPDX-License-Identifier: MIT\n// pragma solidity ^0.7.4;\n// contract Logs {\n//   event Event(uint256 indexed first, uint256 indexed second);\n//   constructor() {\n//     emit Event(1, 2);\n//   }\n//\n//   function logNTimes(uint8 n) public {\n//     for (uint8 i = 0; i < n; i++) {\n//       emit Event(i, i);\n//     }\n//   }\n// }\n\nconst logsContract = \"0x608060405234801561001057600080fd5b50600260017f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a360e58061004f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80635e19e69f14602d575b600080fd5b605960048036036020811015604157600080fd5b81019080803560ff169060200190929190505050605b565b005b60005b8160ff168160ff16101560ab578060ff168160ff167f34e802e5ebd1f132e05852c5064046c1b535831ec52f1c4997fc6fdc4d5345b360405160405180910390a38080600101915050605e565b505056fea26469706673582212201af9c13c7b00e2b628c1258d45f9f62d2aad8cd32fc32fd9515d8ad1e792679064736f6c63430007040033\";\nconst [from] = await provider.send(\"eth_accounts\");\n\nawait provider.send(\"eth_subscribe\", [\"newHeads\"]);\nconst txHash = await provider.send(\"eth_sendTransaction\", [{ from, data: logsContract, gas: \"0x5b8d80\" }] );\nawait provider.once(\"message\");\n\nconst { contractAddress } = await provider.send(\"eth_getTransactionReceipt\", [txHash] );\n\nconst logs = await provider.request({ method: \"eth_getLogs\", params: [{ address: contractAddress }] });\nconsole.log(logs);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 332,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter options as seen in source."
									},
									"type": {
										"type": "reference",
										"name": "FilterArgs"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reflection",
											"declaration": {
												"id": 333,
												"name": "__type",
												"kind": 65536,
												"kindString": "Type literal",
												"flags": {},
												"children": [
													{
														"id": 334,
														"name": "address",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 121,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Address"
														}
													},
													{
														"id": 335,
														"name": "blockHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 122,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 336,
														"name": "blockNumber",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 123,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 337,
														"name": "data",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 124,
																"character": 8
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 338,
														"name": "logIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 125,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													},
													{
														"id": 339,
														"name": "removed",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 126,
																"character": 8
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "boolean"
														}
													},
													{
														"id": 340,
														"name": "topics",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 127,
																"character": 8
															}
														],
														"type": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "array",
																	"elementType": {
																		"type": "reference",
																		"name": "Data"
																	}
																}
															]
														}
													},
													{
														"id": 341,
														"name": "transactionHash",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 128,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Data"
														}
													},
													{
														"id": 342,
														"name": "transactionIndex",
														"kind": 1024,
														"kindString": "Property",
														"flags": {},
														"sources": [
															{
																"fileName": "utils/typings/src/things/blocklogs.d.ts",
																"line": 129,
																"character": 8
															}
														],
														"type": {
															"type": "reference",
															"name": "Quantity"
														}
													}
												],
												"groups": [
													{
														"title": "Properties",
														"kind": 1024,
														"children": [
															334,
															335,
															336,
															337,
															338,
															339,
															340,
															341,
															342
														]
													}
												]
											}
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 263,
					"name": "eth_getStorageAt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2",
								"max": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1514,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 264,
							"name": "eth_getStorageAt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the value from a storage position at a given address.",
								"returns": "The value in storage at the requested position.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// Simple.sol\n// // SPDX-License-Identifier: MIT\n//  pragma solidity ^0.7.4;\n//\n//  contract Simple {\n//      uint256 public value;\n//      constructor() payable {\n//          value = 5;\n//      }\n//  }\nconst simpleSol = \"0x6080604052600560008190555060858060196000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80633fa4f24514602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b6000548156fea26469706673582212200897f7766689bf7a145227297912838b19bcad29039258a293be78e3bf58e20264736f6c63430007040033\";\nconst [from] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, gas: \"0x5b8d80\", data: simpleSol }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\nconst storageValue = await provider.request({ method: \"eth_getStorageAt\", params: [txReceipt.contractAddress, \"0x0\", \"latest\"] });\nconsole.log(storageValue);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 265,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address of the storage."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 266,
									"name": "position",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer of the position in the storage."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 267,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer block number, or the string \"latest\", \"earliest\"\n or \"pending\"."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "Tag.LATEST"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 163,
					"name": "eth_getTransactionByBlockHashAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1092,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 164,
							"name": "eth_getTransactionByBlockHashAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a transaction by block hash and transaction index position.",
								"returns": "The transaction object or `null` if no transaction was found.\n\n* `hash`: `DATA`, 32 Bytes - The transaction hash.\n* `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n* `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n* `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n* `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n* `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n* `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n* `value`: `QUANTITY` - The value transferred in wei.\n* `gas`: `QUANTITY` - The gas provided by the sender.\n* `gasPrice`: `QUANTITY` - The price of gas in wei.\n* `input`: `DATA` - The data sent along with the transaction.\n* `v`: `QUANTITY` - ECDSA recovery id.\n* `r`: `DATA`, 32 Bytes - ECDSA signature r.\n* `s`: `DATA`, 32 Bytes - ECDSA signature s.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst { blockHash, transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n\nconst tx = await provider.request({ method: \"eth_getTransactionByBlockHashAndIndex\", params: [ blockHash, transactionIndex ] });\nconsole.log(tx);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 165,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a block."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 166,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer of the transaction index position."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LegacyTransactionJSON"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 167,
					"name": "eth_getTransactionByBlockNumberAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1138,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 168,
							"name": "eth_getTransactionByBlockNumberAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a transaction by block number and transaction index position.",
								"returns": "The transaction object or `null` if no transaction was found.\n\n* `hash`: `DATA`, 32 Bytes - The transaction hash.\n* `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n* `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n* `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n* `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n* `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n* `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n* `value`: `QUANTITY` - The value transferred in wei.\n* `gas`: `QUANTITY` - The gas provided by the sender.\n* `gasPrice`: `QUANTITY` - The price of gas in wei.\n* `input`: `DATA` - The data sent along with the transaction.\n* `v`: `QUANTITY` - ECDSA recovery id.\n* `r`: `DATA`, 32 Bytes - ECDSA signature r.\n* `s`: `DATA`, 32 Bytes - ECDSA signature s.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconst { transactionIndex } = await provider.request({ method: \"eth_getTransactionReceipt\", params: [txHash] });\n\nconst tx = await provider.request({ method: \"eth_getTransactionByBlockNumberAndIndex\", params: [ \"latest\", transactionIndex ] });\nconsole.log(tx);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 169,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A block number, or the string \"earliest\", \"latest\" or \"pending\"."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 170,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer of the transaction index position."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LegacyTransactionJSON"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 268,
					"name": "eth_getTransactionByHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1587,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 269,
							"name": "eth_getTransactionByHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the information about a transaction requested by transaction hash.",
								"returns": "The transaction object or `null` if no transaction was found.\n\n* `hash`: `DATA`, 32 Bytes - The transaction hash.\n* `nonce`: `QUANTITY` - The number of transactions made by the sender prior to this one.\n* `blockHash`: `DATA`, 32 Bytes - The hash of the block the transaction is in. `null` when pending.\n* `blockNumber`: `QUANTITY` - The number of the block the transaction is in. `null` when pending.\n* `transactionIndex`: `QUANTITY` - The index position of the transaction in the block.\n* `from`: `DATA`, 20 Bytes - The address the transaction is sent from.\n* `to`: `DATA`, 20 Bytes - The address the transaction is sent to.\n* `value`: `QUANTITY` - The value transferred in wei.\n* `gas`: `QUANTITY` - The gas provided by the sender.\n* `gasPrice`: `QUANTITY` - The price of gas in wei.\n* `input`: `DATA` - The data sent along with the transaction.\n* `v`: `QUANTITY` - ECDSA recovery id.\n* `r`: `DATA`, 32 Bytes - ECDSA signature r.\n* `s`: `DATA`, 32 Bytes - ECDSA signature s.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\nconst tx = await provider.request({ method: \"eth_getTransactionByHash\", params: [ txHash ] });\nconsole.log(tx);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 270,
									"name": "transactionHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a transaction."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "LegacyTransactionJSON"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 343,
					"name": "eth_getTransactionCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1",
								"max": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2474,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 344,
							"name": "eth_getTransactionCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of transactions sent from an address.",
								"returns": "Number of transactions sent from this address.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nawait provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\nconst txCount = await provider.request({ method: \"eth_getTransactionCount\", params: [ from, \"latest\" ] });\nconsole.log(txCount);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 345,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "`DATA`, 20 Bytes - The address to get number of transactions sent from"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 346,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Integer block number, or the string \"latest\", \"earliest\"\nor \"pending\"."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"defaultValue": "Tag.LATEST"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 271,
					"name": "eth_getTransactionReceipt",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1624,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 272,
							"name": "eth_getTransactionReceipt",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the receipt of a transaction by transaction hash.",
								"text": "Note: The receipt is not available for pending transactions.\n",
								"returns": "Returns the receipt of a transaction by transaction hash.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\nconst txReceipt = await provider.request({ method: \"eth_getTransactionReceipt\", params: [ txHash ] });\nconsole.log(txReceipt);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 273,
									"name": "transactionHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a transaction."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "TransactionReceiptJSON"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 177,
					"name": "eth_getUncleByBlockHashAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1218,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 178,
							"name": "eth_getUncleByBlockHashAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a uncle of a block by hash and uncle index position.",
								"returns": "A block object or `null` when no block is found.\n\n* `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n* `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n* `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n* `miner`: `DATA`, 20 Bytes -  Address of the miner.\n* `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n* `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n* `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n* `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n* `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n* `number`: `QUANTITY` - The block number. `null` when pending.\n* `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n* `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n* `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n* `extraData`: `DATA` - Extra data for the block.\n* `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n* `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n* `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n* `size`: `QUANTITY` - Integer the size of the block in bytes.\n* `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n* `uncles`: `Array` - Array of uncle hashes.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst blockHash = await provider.send(\"eth_getBlockByNumber\", [\"latest\"] );\nconst block = await provider.send(\"eth_getUncleByBlockHashAndIndex\", [blockHash, \"0x0\"] );\nconsole.log(block);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 179,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a block."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 180,
									"name": "index",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The uncle's index position."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 181,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 201,
													"name": "baseFeePerGas",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 43,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 192,
													"name": "difficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 34,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 198,
													"name": "extraData",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 40,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 195,
													"name": "gasLimit",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 37,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 196,
													"name": "gasUsed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 38,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 202,
													"name": "hash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 44,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 191,
													"name": "logsBloom",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 33,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 187,
													"name": "miner",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 29,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 199,
													"name": "mixHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 41,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 200,
													"name": "nonce",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 42,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 194,
													"name": "number",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 36,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 185,
													"name": "parentHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 27,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 190,
													"name": "receiptsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 32,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 186,
													"name": "sha3Uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 28,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 182,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 24,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 188,
													"name": "stateRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 30,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 197,
													"name": "timestamp",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 39,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 193,
													"name": "totalDifficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 35,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 183,
													"name": "transactions",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 25,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "reference",
																	"name": "LegacyTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP2930AccessListTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP1559FeeMarketTransactionJSON"
																}
															]
														}
													}
												},
												{
													"id": 189,
													"name": "transactionsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 31,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 184,
													"name": "uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 26,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														201,
														192,
														198,
														195,
														196,
														202,
														191,
														187,
														199,
														200,
														194,
														185,
														190,
														186,
														182,
														188,
														197,
														193,
														183,
														189,
														184
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 203,
					"name": "eth_getUncleByBlockNumberAndIndex",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1257,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 204,
							"name": "eth_getUncleByBlockNumberAndIndex",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns information about a uncle of a block by hash and uncle index position.",
								"returns": "A block object or `null` when no block is found.\n\n* `hash`: `DATA`, 32 Bytes - Hash of the block. `null` when pending.\n* `parentHash`: `DATA`, 32 Bytes - Hash of the parent block.\n* `sha3Uncles`: `DATA`, 32 Bytes - SHA3 of the uncles data in the block.\n* `miner`: `DATA`, 20 Bytes -  Address of the miner.\n* `stateRoot`: `DATA`, 32 Bytes - The root of the state trie of the block.\n* `transactionsRoot`: `DATA`, 32 Bytes - The root of the transaction trie of the block.\n* `receiptsRoot`: `DATA`, 32 Bytes - The root of the receipts trie of the block.\n* `logsBloom`: `DATA`, 256 Bytes - The bloom filter for the logs of the block. `null` when pending.\n* `difficulty`: `QUANTITY` - Integer of the difficulty of this block.\n* `number`: `QUANTITY` - The block number. `null` when pending.\n* `gasLimit`: `QUANTITY` - The maximum gas allowed in the block.\n* `gasUsed`: `QUANTITY` - Total gas used by all transactions in the block.\n* `timestamp`: `QUANTITY` - The unix timestamp for when the block was collated.\n* `extraData`: `DATA` - Extra data for the block.\n* `mixHash`: `DATA`, 256 Bytes - Hash identifier for the block.\n* `nonce`: `DATA`, 8 Bytes - Hash of the generated proof-of-work. `null` when pending.\n* `totalDifficulty`: `QUANTITY` - Integer of the total difficulty of the chain until this block.\n* `size`: `QUANTITY` - Integer the size of the block in bytes.\n* `transactions`: `Array` - Array of transaction objects or 32 Bytes transaction hashes depending on the last parameter.\n* `uncles`: `Array` - Array of uncle hashes.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst block = await provider.send(\"eth_getUncleByBlockNumberAndIndex\", [\"latest\", \"0x0\"] );\nconsole.log(block);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 205,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A block number, or the string \"earliest\", \"latest\" or \"pending\"."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 206,
									"name": "uncleIndex",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The uncle's index position."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 207,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 227,
													"name": "baseFeePerGas",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 43,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 218,
													"name": "difficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 34,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 224,
													"name": "extraData",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 40,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 221,
													"name": "gasLimit",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 37,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 222,
													"name": "gasUsed",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 38,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 228,
													"name": "hash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 44,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 217,
													"name": "logsBloom",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 33,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 213,
													"name": "miner",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 29,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 225,
													"name": "mixHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 41,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 226,
													"name": "nonce",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 42,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 220,
													"name": "number",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 36,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 211,
													"name": "parentHash",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 27,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 216,
													"name": "receiptsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 32,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 212,
													"name": "sha3Uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 28,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 208,
													"name": "size",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 24,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 214,
													"name": "stateRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 30,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 223,
													"name": "timestamp",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 39,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 219,
													"name": "totalDifficulty",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 35,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Quantity"
													}
												},
												{
													"id": 209,
													"name": "transactions",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 25,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "union",
															"types": [
																{
																	"type": "reference",
																	"name": "Data"
																},
																{
																	"type": "reference",
																	"name": "LegacyTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP2930AccessListTransactionJSON"
																},
																{
																	"type": "reference",
																	"name": "EIP1559FeeMarketTransactionJSON"
																}
															]
														}
													}
												},
												{
													"id": 215,
													"name": "transactionsRoot",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 31,
															"character": 8
														}
													],
													"type": {
														"type": "reference",
														"name": "Data"
													}
												},
												{
													"id": 210,
													"name": "uncles",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"sources": [
														{
															"fileName": "block/typings/src/block.d.ts",
															"line": 26,
															"character": 8
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														227,
														218,
														224,
														221,
														222,
														228,
														217,
														213,
														225,
														226,
														220,
														211,
														216,
														212,
														208,
														214,
														223,
														219,
														209,
														215,
														210
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 171,
					"name": "eth_getUncleCountByBlockHash",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1163,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "eth_getUncleCountByBlockHash",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of uncles in a block from a block matching the given block hash.",
								"returns": "The number of uncles in a block.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst blockHash = await provider.send(\"eth_getBlockByNumber\", [\"latest\"] );\nconst uncleCount = await provider.send(\"eth_getUncleCountByBlockHash\", [blockHash] );\nconsole.log(uncleCount);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 173,
									"name": "hash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Hash of a block."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 174,
					"name": "eth_getUncleCountByBlockNumber",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1178,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 175,
							"name": "eth_getUncleCountByBlockNumber",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of uncles in a block from a block matching the given block hash.",
								"returns": "The number of uncles in a block.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst uncleCount = await provider.send(\"eth_getUncleCountByBlockNumber\", [\"latest\"] );\nconsole.log(uncleCount);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 176,
									"name": "blockNumber",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A block number, or the string \"earliest\", \"latest\" or \"pending\"."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 229,
					"name": "eth_getWork",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1278,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 230,
							"name": "eth_getWork",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns: An Array with the following elements\n1: `DATA`, 32 Bytes - current block header pow-hash\n2: `DATA`, 32 Bytes - the seed hash used for the DAG.\n3: `DATA`, 32 Bytes - the boundary condition (\"target\"), 2^256 / difficulty.",
								"returns": "The hash of the current block, the seedHash, and the boundary condition to be met (\"target\").",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"eth_getWork\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 231,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A filter id."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "tuple"
											},
											{
												"type": "tuple",
												"elements": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 243,
					"name": "eth_hashrate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1347,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 244,
							"name": "eth_hashrate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the number of hashes per second that the node is mining with.",
								"returns": "Number of hashes per second.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst hashrate = await provider.request({ method: \"eth_hashrate\", params: [] });\nconsole.log(hashrate);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 247,
					"name": "eth_maxPriorityFeePerGas",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1375,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 248,
							"name": "eth_maxPriorityFeePerGas",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns a `maxPriorityFeePerGas` value suitable for quick transaction inclusion.",
								"returns": "The maxPriorityFeePerGas in wei.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst suggestedTip = await provider.request({ method: \"eth_maxPriorityFeePerGas\", params: [] });\nconsole.log(suggestedTip);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 241,
					"name": "eth_mining",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1332,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 242,
							"name": "eth_mining",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns `true` if client is actively mining new blocks.",
								"returns": "returns `true` if the client is mining, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst isMining = await provider.request({ method: \"eth_mining\", params: [] });\nconsole.log(isMining);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 304,
					"name": "eth_newBlockFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2160,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 305,
							"name": "eth_newBlockFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a filter in the node, to notify when a new block arrives. To check\nif the state has changed, call `eth_getFilterChanges`.",
								"returns": "A filter id.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst filterId = await provider.request({ method: \"eth_newBlockFilter\", params: [] });\nconsole.log(filterId);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 308,
					"name": "eth_newFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0",
								"max": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2246,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 309,
							"name": "eth_newFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a filter object, based on filter options, to notify when the state\nchanges (logs). To check if the state has changed, call\n`eth_getFilterChanges`.",
								"text": "If the from `fromBlock` or `toBlock` option are equal to \"latest\" the\nfilter continually append logs for whatever block is seen as latest at the\ntime the block was mined, not just for the block that was \"latest\" when the\nfilter was created.\n\n### A note on specifying topic filters:\nTopics are order-dependent. A transaction with a log with topics [A, B]\nwill be matched by the following topic filters:\n * `[]` “anything”\n * `[A]` “A in first position (and anything after)”\n * `[null, B]` “anything in first position AND B in second position (and\nanything after)”\n * `[A, B]` “A in first position AND B in second position (and anything\nafter)”\n * `[[A, B], [A, B]]` “(A OR B) in first position AND (A OR B) in second\nposition (and anything after)”\n\nFilter options:\n* `fromBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\nor \"pending\".\n* `toBlock`: `QUANTITY | TAG` (optional) - Integer block number, or the string \"latest\", \"earliest\"\nor \"pending\".\n* `address`: `DATA | Array` (optional) - Contract address or a list of addresses from which the logs should originate.\n* `topics`: `Array of DATA` (optional) - Array of 32 Bytes `DATA` topcis. Topics are order-dependent. Each topic can also\nbe an array of `DATA` with \"or\" options.\n",
								"returns": "A filter id.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst filterId = await provider.request({ method: \"eth_newFilter\", params: [] });\nconsole.log(filterId);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 310,
									"name": "filter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"shortText": "The filter options as seen in source.\n"
									},
									"type": {
										"type": "reference",
										"name": "RangeFilterArgs"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 306,
					"name": "eth_newPendingTransactionFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2187,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 307,
							"name": "eth_newPendingTransactionFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a filter in the node, to notify when new pending transactions\narrive. To check if the state has changed, call `eth_getFilterChanges`.",
								"returns": "A filter id.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst filterId = await provider.request({ method: \"eth_newPendingTransactionFilter\", params: [] });\nconsole.log(filterId);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 97,
					"name": "eth_protocolVersion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 843,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 98,
							"name": "eth_protocolVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current ethereum protocol version.",
								"returns": "The current ethereum protocol version.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst version = await provider.request({ method: \"eth_protocolVersion\", params: [] });\nconsole.log(version);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 280,
					"name": "eth_sendRawTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1781,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 281,
							"name": "eth_sendRawTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new message call transaction or a contract creation for signed transactions.",
								"returns": "The transaction hash.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst signedTx = await provider.request({ method: \"eth_signTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nconst txHash = await provider.send(\"eth_sendRawTransaction\", [signedTx] );\nconsole.log(txHash);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 282,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The signed transaction data."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 274,
					"name": "eth_sendTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1692,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 275,
							"name": "eth_sendTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new message call transaction or a contract creation, if the data field contains code.",
								"text": "Transaction call object:\n* `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n* `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n* `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n* `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n* `value`: `QUANTITY` (optional) - Integer of the value in wei.\n* `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n",
								"returns": "The transaction hash.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst txHash = await provider.request({ method: \"eth_sendTransaction\", params: [{ from, to, gas: \"0x5b8d80\" }] });\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\nconsole.log(txHash);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 276,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The transaction call object as seen in source."
									},
									"type": {
										"type": "reference",
										"name": "TypedRpcTransaction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 283,
					"name": "eth_sign",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1814,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 284,
							"name": "eth_sign",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "The sign method calculates an Ethereum specific signature with:\n`sign(keccak256(\"\\x19Ethereum Signed Message:\\n\" + message.length + message)))`.",
								"text": "By adding a prefix to the message makes the calculated signature\nrecognizable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data\n (e.g. transaction) and use the signature to impersonate the victim.\n\nNote the address to sign with must be unlocked.\n",
								"returns": "Signature - a hex encoded 129 byte array\nstarting with `0x`. It encodes the `r`, `s`, and `v` parameters from\nappendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n64...128 the `s` parameter, and the last byte the `v` parameter. Note\nthat the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [account] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst msg = \"0x307866666666666666666666\";\nconst signature = await provider.request({ method: \"eth_sign\", params: [account, msg] });\nconsole.log(signature);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 285,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address to sign with."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 286,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Message to sign."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 277,
					"name": "eth_signTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1745,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 278,
							"name": "eth_signTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Signs a transaction that can be submitted to the network at a later time using `eth_sendRawTransaction`.",
								"text": "Transaction call object:\n* `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n* `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n* `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n* `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n* `value`: `QUANTITY` (optional) - Integer of the value in wei.\n* `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n",
								"returns": "The raw, signed transaction.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst signedTx = await provider.request({ method: \"eth_signTransaction\", params: [{ from, to }] });\nconsole.log(signedTx)\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 279,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The transaction call object as seen in source."
									},
									"type": {
										"type": "reference",
										"name": "TypedRpcTransaction"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 287,
					"name": "eth_signTypedData",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1884,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 288,
							"name": "eth_signTypedData",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Identical to eth_signTypedData_v4.",
								"returns": "Signature. As in `eth_sign`, it is a hex encoded 129 byte array\nstarting with `0x`. It encodes the `r`, `s`, and `v` parameters from\nappendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n64...128 the `s` parameter, and the last byte the `v` parameter. Note\nthat the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).",
								"tags": [
									{
										"tag": "eip",
										"text": "[712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconst [account] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst typedData = {\n types: {\n   EIP712Domain: [\n     { name: 'name', type: 'string' },\n     { name: 'version', type: 'string' },\n     { name: 'chainId', type: 'uint256' },\n     { name: 'verifyingContract', type: 'address' },\n   ],\n   Person: [\n     { name: 'name', type: 'string' },\n     { name: 'wallet', type: 'address' }\n   ],\n   Mail: [\n     { name: 'from', type: 'Person' },\n     { name: 'to', type: 'Person' },\n     { name: 'contents', type: 'string' }\n   ],\n },\n primaryType: 'Mail',\n domain: {\n   name: 'Ether Mail',\n   version: '1',\n   chainId: 1,\n   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n },\n message: {\n   from: {\n     name: 'Cow',\n     wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   },\n   to: {\n     name: 'Bob',\n     wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   },\n   contents: 'Hello, Bob!',\n },\n};\nconst signature = await provider.request({ method: \"eth_signTypedData\", params: [account, typedData] });\nconsole.log(signature);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 289,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address of the account that will sign the messages."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 290,
									"name": "typedData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Typed structured data to be signed."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "MessageTypes"
											}
										],
										"name": "TypedMessage"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 291,
					"name": "eth_signTypedData_v4",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1944,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 292,
							"name": "eth_signTypedData_v4",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"returns": "Signature. As in `eth_sign`, it is a hex encoded 129 byte array\nstarting with `0x`. It encodes the `r`, `s`, and `v` parameters from\nappendix F of the [yellow paper](https://ethereum.github.io/yellowpaper/paper.pdf)\n in big-endian format. Bytes 0...64 contain the `r` parameter, bytes\n64...128 the `s` parameter, and the last byte the `v` parameter. Note\nthat the `v` parameter includes the chain id as specified in [EIP-155](https://eips.ethereum.org/EIPS/eip-155).",
								"tags": [
									{
										"tag": "eip",
										"text": "[712](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md)"
									},
									{
										"tag": "example",
										"text": "\n```javascript\nconst [account] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst typedData = {\n types: {\n   EIP712Domain: [\n     { name: 'name', type: 'string' },\n     { name: 'version', type: 'string' },\n     { name: 'chainId', type: 'uint256' },\n     { name: 'verifyingContract', type: 'address' },\n   ],\n   Person: [\n     { name: 'name', type: 'string' },\n     { name: 'wallet', type: 'address' }\n   ],\n   Mail: [\n     { name: 'from', type: 'Person' },\n     { name: 'to', type: 'Person' },\n     { name: 'contents', type: 'string' }\n   ],\n },\n primaryType: 'Mail',\n domain: {\n   name: 'Ether Mail',\n   version: '1',\n   chainId: 1,\n   verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',\n },\n message: {\n   from: {\n     name: 'Cow',\n     wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',\n   },\n   to: {\n     name: 'Bob',\n     wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',\n   },\n   contents: 'Hello, Bob!',\n },\n};\nconst signature = await provider.request({ method: \"eth_signTypedData_v4\", params: [account, typedData] });\nconsole.log(signature);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 293,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Address of the account that will sign the messages."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 294,
									"name": "typedData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Typed structured data to be signed."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "MessageTypes"
											}
										],
										"name": "TypedMessage"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 237,
					"name": "eth_submitHashrate",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1318,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 238,
							"name": "eth_submitHashrate",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Used for submitting mining hashrate.",
								"returns": "`true` if submitting went through succesfully and `false` otherwise.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst hashRate = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\nconst clientId = \"0xb2222a74119abd18dbcb7d1f661c6578b7bbeb4984c50e66ed538347f606b971\";\nconst result = await provider.request({ method: \"eth_submitHashrate\", params: [hashRate, clientId] });\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 239,
									"name": "hashRate",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A hexadecimal string representation (32 bytes) of the hash rate."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 240,
									"name": "clientID",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "A random hexadecimal(32 bytes) ID identifying the client."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 232,
					"name": "eth_submitWork",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1299,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 233,
							"name": "eth_submitWork",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Used for submitting a proof-of-work solution.",
								"returns": "`true` if the provided solution is valid, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst nonce = \"0xe0df4bd14ab39a71\";\nconst powHash = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\nconst digest = \"0xb2222a74119abd18dbcb7d1f661c6578b7bbeb4984c50e66ed538347f606b971\";\nconst result = await provider.request({ method: \"eth_submitWork\", params: [nonce, powHash, digest] });\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 234,
									"name": "nonce",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The nonce found (64 bits)."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 235,
									"name": "powHash",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The header's pow-hash (256 bits)."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 236,
									"name": "digest",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The mix digest (256 bits)."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 295,
					"name": "eth_subscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 1992,
							"character": 2
						}
					],
					"signatures": [
						{
							"id": 296,
							"name": "eth_subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Starts a subscription to a particular event. For every event that matches\nthe subscription a JSON-RPC notification with event details and\nsubscription ID will be sent to a client.",
								"returns": "A subscription id.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst subscriptionId = await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconsole.log(subscriptionId);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 297,
									"name": "subscriptionName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Name for the subscription."
									},
									"type": {
										"type": "reference",
										"name": "SubscriptionName"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "PromiEvent"
							}
						},
						{
							"id": 298,
							"name": "eth_subscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Starts a subscription to a particular event. For every event that matches\nthe subscription a JSON-RPC notification with event details and\nsubscription ID will be sent to a client.",
								"returns": "A subscription id.\n"
							},
							"parameters": [
								{
									"id": 299,
									"name": "subscriptionName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "-"
									},
									"type": {
										"type": "literal",
										"value": "logs"
									}
								},
								{
									"id": 300,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Filter options:\n * `address`: either an address or an array of addresses. Only logs that\n   are created from these addresses are returned\n * `topics`, only logs which match the specified topics"
									},
									"type": {
										"type": "reference",
										"name": "BaseFilterArgs"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "PromiEvent"
							}
						}
					]
				},
				{
					"id": 99,
					"name": "eth_syncing",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 864,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 100,
							"name": "eth_syncing",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns an object containing data about the sync status or `false` when not syncing.",
								"returns": "An object with sync status data or `false`, when not syncing.\n\n* `startingBlock`: \\{bigint\\} The block at which the import started (will\n    only be reset, after the sync reached his head).\n* `currentBlock`: \\{bigint\\} The current block, same as `eth_blockNumber`.\n* `highestBlock`: \\{bigint\\} The estimated highest block.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst result = await provider.request({ method: \"eth_syncing\", params: [] });\nconsole.log(result);\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 314,
					"name": "eth_uninstallFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2350,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 315,
							"name": "eth_uninstallFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Uninstalls a filter with given id. Should always be called when watch is\nno longer needed.",
								"returns": "`true` if the filter was successfully uninstalled, otherwise\n`false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst filterId = await provider.request({ method: \"eth_newFilter\", params: [] });\nconst result = await provider.request({ method: \"eth_uninstallFilter\", params: [filterId] });\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 316,
									"name": "filterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter id."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 301,
					"name": "eth_unsubscribe",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2136,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 302,
							"name": "eth_unsubscribe",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Cancel a subscription to a particular event. Returns a boolean indicating\nif the subscription was successfully cancelled.",
								"returns": "`true` if subscription was cancelled successfully, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst subscriptionId = await provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst result = await provider.request({ method: \"eth_unsubscribe\", params: [subscriptionId] });\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 303,
									"name": "subscriptionId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The ID of the subscription to unsubscribe to."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 60,
					"name": "evm_addAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 543,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 61,
							"name": "evm_addAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds any arbitrary account to the `personal` namespace.",
								"text": "Note: accounts already known to the `personal` namespace and accounts\nreturned by `eth_accounts` cannot be re-added using this method.",
								"returns": "`true` if  the account was successfully added. `false` if the\naccount is already in the `personal` namespace.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst address = \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\";\nconst passphrase = \"passphrase\"\nconst result = await provider.send(\"evm_addAccount\", [address, passphrase] );\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 62,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the account to add to the `personal`\nnamespace."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 63,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The passphrase used to encrypt the account's private key.\nNOTE: this passphrase will be needed for all `personal` namespace calls\nthat require a password."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 49,
					"name": "evm_increaseTime",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 397,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 50,
							"name": "evm_increaseTime",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Jump forward in time by the given amount of time, in seconds.",
								"returns": "Returns the total time adjustment, in seconds.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst seconds = 10;\nconst timeAdjustment = await provider.send(\"evm_increaseTime\", [seconds] );\nconsole.log(timeAdjustment);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 51,
									"name": "seconds",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of seconds to jump forward in time by. Must be greater than or equal to `0`."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 37,
					"name": "evm_mine",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 293,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 38,
							"name": "evm_mine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Force a single block to be mined.",
								"text": "Mines a block independent of whether or not mining is started or stopped.\nWill mine an empty block if there are no available transactions to mine.\n",
								"returns": "The string `\"0x0\"`. May return additional meta-data in the future.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(\"start\", await provider.send(\"eth_blockNumber\"));\nawait provider.send(\"evm_mine\", [{blocks: 5}] ); // mines 5 blocks\nconsole.log(\"end\", await provider.send(\"eth_blockNumber\"));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 39,
									"name": "timestamp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the timestamp the block should be mined with.\nEXPERIMENTAL: Optionally, specify an `options` object with `timestamp`\nand/or `blocks` fields. If `blocks` is given, it will mine exactly `blocks`\n number of blocks, regardless of any other blocks mined or reverted during it's\noperation. This behavior is subject to change!\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "literal",
										"value": "0x0"
									}
								],
								"name": "Promise"
							}
						},
						{
							"id": 40,
							"name": "evm_mine",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 41,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 42,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 44,
													"name": "blocks",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "ethereum/src/api.ts",
															"line": 296,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												},
												{
													"id": 43,
													"name": "timestamp",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "ethereum/src/api.ts",
															"line": 295,
															"character": 4
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														44,
														43
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "literal",
										"value": "0x0"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 64,
					"name": "evm_removeAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 566,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 65,
							"name": "evm_removeAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Removes an account from the `personal` namespace.",
								"text": "Note: accounts not known to the `personal` namespace cannot be removed\nusing this method.",
								"returns": "`true` if the account was successfully removed. `false` if the\naccount was not in the `personal` namespace.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [address] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst passphrase = \"passphrase\"\nconst result = await provider.send(\"evm_removeAccount\", [address, passphrase] );\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 66,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address of the account to remove from the `personal`\nnamespace."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 67,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The passphrase used to decrypt the account's private key."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 55,
					"name": "evm_revert",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 478,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 56,
							"name": "evm_revert",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Revert the state of the blockchain to a previous snapshot. Takes a single\nparameter, which is the snapshot id to revert to. This deletes the given\nsnapshot, as well as any snapshots taken after (e.g.: reverting to id 0x1\nwill delete snapshots with ids 0x1, 0x2, etc.)",
								"returns": "`true` if a snapshot was reverted, otherwise `false`.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [from, to] = await provider.send(\"eth_accounts\");\nconst startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from] ));\n\n// take a snapshot\nconst snapshotId = await provider.send(\"evm_snapshot\");\n\n// send value to another account (over-simplified example)\nawait provider.send(\"eth_subscribe\", [\"newHeads\"] );\nawait provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}] );\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\n// ensure balance has updated\nconst newBalance = await provider.send(\"eth_getBalance\", [from] );\nassert(BigInt(newBalance) < startingBalance);\n\n// revert the snapshot\nconst isReverted = await provider.send(\"evm_revert\", [snapshotId] );\nassert(isReverted);\nconsole.log({isReverted: isReverted});\n\n// ensure balance has reverted\nconst endingBalance = await provider.send(\"eth_getBalance\", [from] );\nconst isBalanceReverted = assert.strictEqual(BigInt(endingBalance), startingBalance);\nconsole.log({isBalanceReverted: isBalanceReverted});\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 57,
									"name": "snapshotId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The snapshot id to revert."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 45,
					"name": "evm_setAccountNonce",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 365,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 46,
							"name": "evm_setAccountNonce",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the given account's nonce to the specified value. Mines a new block\nbefore returning.",
								"text": "Warning: this will result in an invalid state tree.\n",
								"returns": "`true` if it worked, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst nonce = \"0x3e8\";\nconst [address] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst result = await provider.send(\"evm_setAccountNonce\", [address, nonce] );\nconsole.log(result);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 47,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The account address to update."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 48,
									"name": "nonce",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The nonce value to be set."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 52,
					"name": "evm_setTime",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0",
								"max": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 424,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 53,
							"name": "evm_setTime",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the internal clock time to the given timestamp.",
								"text": "Warning: This will allow you to move *backwards* in time, which may cause\nnew blocks to appear to be mined before old blocks. This is will result in\nan invalid state.\n",
								"returns": "The amount of *seconds* between the given timestamp and now.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst currentDate = Date.now();\nsetTimeout(async () => {\n  const time = await provider.send(\"evm_setTime\", [currentDate] );\n  console.log(time); // should be about two seconds ago\n}, 1000);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 54,
									"name": "time",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "JavaScript timestamp (millisecond precision)."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "number"
											},
											{
												"type": "reference",
												"name": "Date"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 58,
					"name": "evm_snapshot",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 519,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 59,
							"name": "evm_snapshot",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Snapshot the state of the blockchain at the current block. Takes no\nparameters. Returns the id of the snapshot that was created. A snapshot can\nonly be reverted once. After a successful `evm_revert`, the same snapshot\nid cannot be used again. Consider creating a new snapshot after each\n`evm_revert` if you need to revert to the same point multiple times.",
								"returns": "The hex-encoded identifier for this snapshot.\n",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst provider = ganache.provider();\nconst [from, to] = await provider.send(\"eth_accounts\");\nconst startingBalance = BigInt(await provider.send(\"eth_getBalance\", [from] ));\n\n// take a snapshot\nconst snapshotId = await provider.send(\"evm_snapshot\");\n\n// send value to another account (over-simplified example)\nawait provider.send(\"eth_subscribe\", [\"newHeads\"] );\nawait provider.send(\"eth_sendTransaction\", [{from, to, value: \"0xffff\"}] );\nawait provider.once(\"message\"); // Note: `await provider.once` is non-standard\n\n// ensure balance has updated\nconst newBalance = await provider.send(\"eth_getBalance\", [from] );\nassert(BigInt(newBalance) < startingBalance);\n\n// revert the snapshot\nconst isReverted = await provider.send(\"evm_revert\", [snapshotId] );\nassert(isReverted);\n\n// ensure balance has reverted\nconst endingBalance = await provider.send(\"eth_getBalance\", [from] );\nconst isBalanceReverted = assert.strictEqual(BigInt(endingBalance), startingBalance);\nconsole.log({isBalanceReverted: isBalanceReverted});\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 76,
					"name": "miner_setEtherbase",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 654,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 77,
							"name": "miner_setEtherbase",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the etherbase, where mining rewards will go.",
								"returns": "`true`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [account] = await provider.request({ method: \"eth_accounts\", params: [] });\nconsole.log(await provider.send(\"miner_setEtherbase\", [account] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 78,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The address where the mining rewards will go."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 79,
					"name": "miner_setExtra",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 669,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 80,
							"name": "miner_setExtra",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Set the extraData block header field a miner can include.",
								"returns": "If successfully set returns `true`, otherwise returns an error.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"miner_setExtra\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 81,
									"name": "extra",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The `extraData` to include."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 73,
					"name": "miner_setGasPrice",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 638,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 74,
							"name": "miner_setGasPrice",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets the default accepted gas price when mining transactions.\nAny transactions that don't specify a gas price will use this amount.\nTransactions that are below this limit are excluded from the mining process.",
								"returns": "`true`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"miner_setGasPrice\", [300000] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 75,
									"name": "number",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Default accepted gas price."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 68,
					"name": "miner_start",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0",
								"max": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 591,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 69,
							"name": "miner_start",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Resume the CPU mining process with the given number of threads.",
								"text": "Note: `threads` is ignored.",
								"returns": "`true`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nawait provider.send(\"miner_stop\");\n// check that eth_mining returns false\nconsole.log(await provider.send(\"eth_mining\"));\nawait provider.send(\"miner_start\");\n// check that eth_mining returns true\nconsole.log(await provider.send(\"eth_mining\"));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 70,
									"name": "threads",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Number of threads to resume the CPU mining process with."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "1"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 71,
					"name": "miner_stop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 621,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 72,
							"name": "miner_stop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stop the CPU mining operation.",
								"returns": "`true`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// check that eth_mining returns true\nconsole.log(await provider.send(\"eth_mining\"));\nawait provider.send(\"miner_stop\");\n// check that eth_mining returns false\nconsole.log(await provider.send(\"eth_mining\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 89,
					"name": "net_listening",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 735,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 90,
							"name": "net_listening",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns `true` if client is actively listening for network connections.",
								"returns": "`true` when listening, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"net_listening\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 91,
					"name": "net_peerCount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 748,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 92,
							"name": "net_peerCount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns number of peers currently connected to the client.",
								"returns": "Number of connected peers.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"net_peerCount\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Quantity"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 87,
					"name": "net_version",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 722,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 88,
							"name": "net_version",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current network id.",
								"returns": "The current network id. This value should NOT be JSON-RPC\nQuantity/Data encoded.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"net_version\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 367,
					"name": "personal_importRawKey",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2798,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 368,
							"name": "personal_importRawKey",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Imports the given unencrypted private key (hex string) into the key store, encrypting it with the passphrase.",
								"returns": "Returns the address of the new account.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst rawKey = \"0x0123456789012345678901234567890123456789012345678901234567890123\";\nconst passphrase = \"passphrase\";\n\nconst address = await provider.send(\"personal_importRawKey\",[rawKey, passphrase] );\nconsole.log(address);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 369,
									"name": "rawKey",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The raw, unencrypted private key to import."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 370,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The passphrase to encrypt with."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Address"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 362,
					"name": "personal_listAccounts",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2749,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 363,
							"name": "personal_listAccounts",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns all the Ethereum account addresses of all keys that have been\nadded.",
								"returns": "The Ethereum account addresses of all keys that have been added.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"personal_listAccounts\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 371,
					"name": "personal_lockAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2825,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 372,
							"name": "personal_lockAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Locks the account. The account can no longer be used to send transactions.",
								"returns": "Returns `true` if the account was locked, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [account] = await provider.send(\"personal_listAccounts\");\nconst isLocked = await provider.send(\"personal_lockAccount\", [account] );\nconsole.log(isLocked);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 373,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The account address to be locked."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 364,
					"name": "personal_newAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2767,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 365,
							"name": "personal_newAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Generates a new account with private key. Returns the address of the new\naccount.",
								"returns": "The new account's address.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst passphrase = \"passphrase\";\nconst address = await provider.send(\"personal_newAccount\", [passphrase] );\nconsole.log(address);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 366,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The passphrase to encrypt the private key with."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Address"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 379,
					"name": "personal_sendTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2895,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 380,
							"name": "personal_sendTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Validate the given passphrase and submit transaction.",
								"text": "The transaction is the same argument as for `eth_sendTransaction` and\ncontains the from address. If the passphrase can be used to decrypt the\nprivate key belonging to `tx.from` the transaction is verified, signed and\nsend onto the network. The account is not unlocked globally in the node\nand cannot be used in other RPC calls.\n\nTransaction call object:\n* `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n* `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n* `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n* `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n* `value`: `QUANTITY` (optional) - Integer of the value in wei.\n* `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n",
								"returns": "The transaction hash or if unsuccessful an error.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst passphrase = \"passphrase\";\nconst newAccount = await provider.send(\"personal_newAccount\", [passphrase] );\nconst [to] = await provider.send(\"personal_listAccounts\");\n\n// use account and passphrase to send the transaction\nconst txHash = await provider.send(\"personal_sendTransaction\", [{ from: newAccount, to, gasLimit: \"0x5b8d80\" }, passphrase] );\nconsole.log(txHash);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 381,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "TypedRpcTransaction"
									}
								},
								{
									"id": 382,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The passphrase to decrpyt the private key belonging to `tx.from`."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 383,
					"name": "personal_signTransaction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2951,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 384,
							"name": "personal_signTransaction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Validates the given passphrase and signs a transaction that can be\nsubmitted to the network at a later time using `eth_sendRawTransaction`.",
								"text": "The transaction is the same argument as for `eth_signTransaction` and\ncontains the from address. If the passphrase can be used to decrypt the\nprivate key belonging to `tx.from` the transaction is verified and signed.\nThe account is not unlocked globally in the node and cannot be used in other RPC calls.\n\nTransaction call object:\n* `from`: `DATA`, 20 bytes (optional) - The address the transaction is sent from.\n* `to`: `DATA`, 20 bytes - The address the transaction is sent to.\n* `gas`: `QUANTITY` (optional) - Integer of the maximum gas allowance for the transaction.\n* `gasPrice`: `QUANTITY` (optional) - Integer of the price of gas in wei.\n* `value`: `QUANTITY` (optional) - Integer of the value in wei.\n* `data`: `DATA` (optional) - Hash of the method signature and the ABI encoded parameters.\n",
								"returns": "The raw, signed transaction.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst [to] = await provider.request({ method: \"eth_accounts\", params: [] });\nconst passphrase = \"passphrase\";\nconst from = await provider.send(\"personal_newAccount\", [passphrase] );\nawait provider.request({ method: \"eth_subscribe\", params: [\"newHeads\"] });\nconst signedTx = await provider.request({ method: \"personal_signTransaction\", params: [{ from, to }, passphrase] });\nconsole.log(signedTx)\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 385,
									"name": "transaction",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The transaction call object as seen in source."
									},
									"type": {
										"type": "reference",
										"name": "TypedRpcTransaction"
									}
								},
								{
									"id": 386,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 374,
					"name": "personal_unlockAccount",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2",
								"max": "3"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2854,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 375,
							"name": "personal_unlockAccount",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Unlocks the account for use.",
								"text": "The unencrypted key will be held in memory until the unlock duration\nexpires. The unlock duration defaults to 300 seconds. An explicit duration\nof zero seconds unlocks the key until geth exits.\n\nThe account can be used with `eth_sign` and `eth_sendTransaction` while it is\nunlocked.",
								"returns": "`true` if it worked. Throws an error or returns `false` if it did not.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\n// generate an account\nconst passphrase = \"passphrase\";\nconst newAccount = await provider.send(\"personal_newAccount\", [passphrase] );\nconst isUnlocked = await provider.send(\"personal_unlockAccount\", [newAccount, passphrase] );\nconsole.log(isUnlocked);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 376,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "20 Bytes - The address of the account to unlock."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 377,
									"name": "passphrase",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Passphrase to unlock the account."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 378,
									"name": "duration",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "(default: 300) Duration in seconds how long the account\nshould remain unlocked for. Set to 0 to disable automatic locking."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"defaultValue": "300"
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 387,
					"name": "rpc_modules",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2979,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 388,
							"name": "rpc_modules",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns object of RPC modules.",
								"returns": "RPC modules.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"rpc_modules\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reflection",
										"declaration": {
											"id": 389,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 390,
													"name": "eth",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 394,
													"name": "evm",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 391,
													"name": "net",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 395,
													"name": "personal",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 392,
													"name": "rpc",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												},
												{
													"id": 393,
													"name": "web3",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "literal",
														"value": "1.0"
													},
													"defaultValue": "\"1.0\""
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														390,
														394,
														391,
														395,
														392,
														393
													]
												}
											]
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 403,
					"name": "shh_addToGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3036,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 404,
							"name": "shh_addToGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Adds a whisper identity to the group.",
								"returns": "`true` if the identity was successfully added to the group, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_addToGroup\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 405,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The identity address to add to a group."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 413,
					"name": "shh_getFilterChanges",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3084,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 414,
							"name": "shh_getFilterChanges",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Polling method for whisper filters. Returns new messages since the last call of this method.",
								"returns": "More Info: https://github.com/ethereum/wiki/wiki/JSON-RPC#shh_getfilterchanges",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_getFilterChanges\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 415,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter id. Ex: \"0x7\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 416,
					"name": "shh_getMessages",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3099,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 417,
							"name": "shh_getMessages",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get all messages matching a filter. Unlike shh_getFilterChanges this returns all messages.",
								"returns": "See: `shh_getFilterChanges`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_getMessages\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 418,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter id. Ex: \"0x7\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 398,
					"name": "shh_hasIdentity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3011,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 399,
							"name": "shh_hasIdentity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Checks if the client hold the private keys for a given identity.",
								"returns": "Returns `true` if the client holds the private key for that identity, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_hasIdentity\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 400,
									"name": "address",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The identity address to check."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 406,
					"name": "shh_newFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "2"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3053,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 407,
							"name": "shh_newFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates filter to notify, when client receives whisper message matching the filter options.",
								"returns": "Returns `true` if the identity was successfully added to the group, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_newFilter\", [\"0x0\", []] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 408,
									"name": "to",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "(optional) Identity of the receiver. When present it will try to decrypt any incoming message\n if the client holds the private key to this identity."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 409,
									"name": "topics",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "Array of topics which the incoming message's topics should match."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 401,
					"name": "shh_newGroup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3021,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 402,
							"name": "shh_newGroup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a new group.",
								"returns": "The address of the new group.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 396,
					"name": "shh_newIdentity",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 2996,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 397,
							"name": "shh_newIdentity",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates new whisper identity in the client.",
								"returns": "- The address of the new identity.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_newIdentity\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 419,
					"name": "shh_post",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3114,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 420,
							"name": "shh_post",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Creates a whisper message and injects it into the network for distribution.",
								"returns": "Returns `true` if the message was sent, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_post\", [{}] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 421,
									"name": "postData",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "-"
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 410,
					"name": "shh_uninstallFilter",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3069,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 411,
							"name": "shh_uninstallFilter",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Uninstalls a filter with given id. Should always be called when watch is no longer needed.\nAdditionally filters timeout when they aren't requested with `shh_getFilterChanges` for a period of time.",
								"returns": "`true` if the filter was successfully uninstalled, otherwise `false`.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_uninstallFilter\", [\"0x0\"] ));\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 412,
									"name": "id",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "The filter id. Ex: \"0x7\""
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 422,
					"name": "shh_version",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 3128,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 423,
							"name": "shh_version",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current whisper protocol version.",
								"returns": "The current whisper protocol version.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"shh_version\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 82,
					"name": "web3_clientVersion",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "0"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 690,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 83,
							"name": "web3_clientVersion",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns the current client version.",
								"returns": "The current client version.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconsole.log(await provider.send(\"web3_clientVersion\"));\n```\n"
									}
								]
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 84,
					"name": "web3_sha3",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"decorators": [
						{
							"name": "assertArgLength",
							"type": {
								"type": "reference",
								"name": "assertArgLength"
							},
							"arguments": {
								"min": "1"
							}
						}
					],
					"sources": [
						{
							"fileName": "ethereum/src/api.ts",
							"line": 706,
							"character": 8
						}
					],
					"signatures": [
						{
							"id": 85,
							"name": "web3_sha3",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Returns Keccak-256 (not the standardized SHA3-256) of the given data.",
								"returns": "The SHA3 result of the given string.",
								"tags": [
									{
										"tag": "example",
										"text": "\n```javascript\nconst data = \"hello trufflers\";\nconst sha3 = await provider.send(\"web3_sha3\", [data] );\nconsole.log(sha3);\n```\n"
									}
								]
							},
							"parameters": [
								{
									"id": 86,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "the data to convert into a SHA3 hash."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "Data"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						2
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						13,
						10,
						7,
						12,
						11,
						14
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						33,
						35,
						29,
						20,
						24,
						15,
						355,
						351,
						249,
						251,
						347,
						253,
						101,
						93,
						245,
						255,
						129,
						103,
						158,
						155,
						259,
						161,
						311,
						317,
						330,
						263,
						163,
						167,
						268,
						343,
						271,
						177,
						203,
						171,
						174,
						229,
						243,
						247,
						241,
						304,
						308,
						306,
						97,
						280,
						274,
						283,
						277,
						287,
						291,
						237,
						232,
						295,
						99,
						314,
						301,
						60,
						49,
						37,
						64,
						55,
						45,
						52,
						58,
						76,
						79,
						73,
						68,
						71,
						89,
						91,
						87,
						367,
						362,
						371,
						364,
						379,
						383,
						374,
						387,
						403,
						413,
						416,
						398,
						406,
						401,
						396,
						419,
						410,
						422,
						82,
						84
					]
				}
			],
			"sources": [
				{
					"fileName": "ethereum/src/api.ts",
					"line": 147,
					"character": 21
				}
			],
			"indexSignature": {
				"id": 424,
				"name": "__index",
				"kind": 8192,
				"kindString": "Index signature",
				"flags": {},
				"parameters": [
					{
						"id": 425,
						"name": "index",
						"kind": 32768,
						"flags": {},
						"type": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				],
				"type": {
					"type": "reflection",
					"declaration": {
						"id": 426,
						"name": "__type",
						"kind": 65536,
						"kindString": "Type literal",
						"flags": {},
						"sources": [
							{
								"fileName": "ethereum/src/api.ts",
								"line": 148,
								"character": 28
							}
						],
						"signatures": [
							{
								"id": 427,
								"name": "__type",
								"kind": 4096,
								"kindString": "Call signature",
								"flags": {},
								"parameters": [
									{
										"id": 428,
										"name": "args",
										"kind": 32768,
										"kindString": "Parameter",
										"flags": {
											"isRest": true
										},
										"type": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								],
								"type": {
									"type": "reference",
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "any"
										}
									],
									"name": "Promise"
								}
							}
						]
					}
				}
			},
			"implementedTypes": [
				{
					"type": "reference",
					"name": "Api"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				1
			]
		}
	],
	"sources": [
		{
			"fileName": "ethereum/src/api.ts",
			"line": 2,
			"character": 0
		}
	]
}