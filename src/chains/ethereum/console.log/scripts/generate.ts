import { writeFileSync } from "fs";
import { basename, dirname, join } from "path";
import {
  combinatorTypes,
  getSignatureCode,
  permute,
  primitiveTypes,
  generateNamedSignatureCode
} from "./helpers";
import { Handler, Handlers } from "../src/handlers";

const handlersKeys: Handler[] = Object.keys(Handlers) as Handler[];

const solidityFunctions = [
  `// SPDX-License-Identifier: MIT
pragma solidity >= 0.4.22 <0.9.0;

library console {
    address constant CONSOLE_PRECOMPILE = address(0x000000000000000000636F6e736F6c652e6c6f67);

    function _sendLogPayload(bytes memory payload) private view {
        address consolePrecompile = CONSOLE_PRECOMPILE;
        assembly {
            let argumentsLength := mload(payload)
            let argumentsOffset := add(payload, 32)
            pop(staticcall(gas(), consolePrecompile, argumentsOffset, argumentsLength, 0, 0))
        }
    }`
];
const signatureMap = [];

// log()
const emptyLog = getSignatureCode([]);
signatureMap.push(emptyLog.javascript);
solidityFunctions.push(emptyLog.solidity);

// logString(string value), logBytes(bytes value),, etc.
for (const signatures of primitiveTypes.map(generateNamedSignatureCode)) {
  for (const signature of signatures) {
    signatureMap.push(signature.javascript);
    solidityFunctions.push(signature.solidity);
  }
}

// logBytes1(bytes1 value1) ... logBytes32(bytes1 value1)
for (let length = 1; length <= 32; length++) {
  const signature = getSignatureCode(
    [`bytes${length}` as any],
    `logBytes${length}`
  );
  signatureMap.push(signature.javascript);
  solidityFunctions.push(signature.solidity);
}

// all possible permutations of combinatorTypes:
for (const signature of permute(combinatorTypes)) {
  signatureMap.push(signature.javascript);
  solidityFunctions.push(signature.solidity);
}

const signatureFile = `/*
 * This file was automatically generated by \`${dirname(__filename)}/${basename(
  __filename
)}\`; do not edit.
 */

import { ${handlersKeys.join(", ")}, fixedBytes } from "./handlers";

export const signatureMap = new Map([
${signatureMap.join(",\n\n")}
]);
`;

// helpers

solidityFunctions.push(`}`);

writeFileSync(join(__dirname, "../src/", "signatures.ts"), signatureFile);

writeFileSync(
  join(__dirname, "../", "console.sol"),
  solidityFunctions.join("\n")
);
