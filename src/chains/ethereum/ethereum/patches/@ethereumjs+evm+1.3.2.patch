diff --git a/node_modules/@ethereumjs/evm/dist/evm.js b/node_modules/@ethereumjs/evm/dist/evm.js
index 7e6452a..40e0ad6 100644
--- a/node_modules/@ethereumjs/evm/dist/evm.js
+++ b/node_modules/@ethereumjs/evm/dist/evm.js
@@ -412,7 +412,7 @@ class EVM {
             containerCode: message.containerCode,
             versionedHashes: message.versionedHashes ?? [],
         };
-        const interpreter = new interpreter_1.Interpreter(this, this.eei, env, message.gasLimit);
+        const interpreter = new interpreter_1.Interpreter(this, this.eei, env, message.gasLimit, this.onRunStep);
         if (message.selfdestruct) {
             interpreter._result.selfdestruct = message.selfdestruct;
         }
diff --git a/node_modules/@ethereumjs/evm/dist/interpreter.js b/node_modules/@ethereumjs/evm/dist/interpreter.js
index 9087295..dca219c 100644
--- a/node_modules/@ethereumjs/evm/dist/interpreter.js
+++ b/node_modules/@ethereumjs/evm/dist/interpreter.js
@@ -18,7 +18,8 @@ class Interpreter {
     // TODO remove eei from constructor this can be directly read from EVM
     // EEI gets created on EVM creation and will not be re-instantiated
     // TODO remove gasLeft as constructor argument
-    constructor(evm, eei, env, gasLeft) {
+    constructor(evm, eei, env, gasLeft, onRunStep) {
+        this.onRunStep = onRunStep;
         // Opcode debuggers (e.g. { 'push': [debug Object], 'sstore': [debug Object], ...})
         this.opDebuggers = {};
         this._evm = evm;
@@ -145,12 +146,17 @@ class Interpreter {
             // or if the vm is running in debug mode (to display opcode debug logs)
             await this._runStepHook(gas, gasLimitClone);
         }
+        this.onRunStep && this.onRunStep(this, this._runState.stack._store, this._runState.env.depth, gas, this._runState.opCode, this._runState.gasLeft, opInfo.name);
+
         // Check for invalid opcode
         if (opInfo.name === 'INVALID') {
             throw new exceptions_1.EvmError(exceptions_1.ERROR.INVALID_OPCODE);
         }
         // Reduce opcode's base fee
-        this.useGas(gas, `${opInfo.name} fee`);
+        this.useGas(gas);
+
+
+
         // Advance program counter
         this._runState.programCounter++;
         // Execute opcode handler
diff --git a/node_modules/@ethereumjs/evm/dist/opcodes/functions.js b/node_modules/@ethereumjs/evm/dist/opcodes/functions.js
index 8a89f31..d85fbd8 100644
--- a/node_modules/@ethereumjs/evm/dist/opcodes/functions.js
+++ b/node_modules/@ethereumjs/evm/dist/opcodes/functions.js
@@ -1,6 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.handlers = void 0;
+const bufferToBigInt = require("@ganache/utils").bufferToBigInt;
 const util_1 = require("@ethereumjs/util");
 const keccak_1 = require("ethereum-cryptography/keccak");
 const utils_1 = require("ethereum-cryptography/utils");
@@ -762,14 +763,15 @@ exports.handlers = new Map([
     [
         0x60,
         function (runState, common) {
-            const numToPush = runState.opCode - 0x5f;
-            if (common.isActivatedEIP(3540) &&
-                runState.programCounter + numToPush > runState.code.length) {
+            const { opCode, stack, code, programCounter } = runState;
+            const numToPush = opCode - 0x5f;
+            const nextCounter = programCounter + numToPush;
+            if (nextCounter > code.length && common.isActivatedEIP(3540)) {
                 (0, util_2.trap)(exceptions_1.ERROR.OUT_OF_RANGE);
             }
-            const loaded = (0, util_1.bufferToBigInt)(runState.code.slice(runState.programCounter, runState.programCounter + numToPush));
-            runState.programCounter += numToPush;
-            runState.stack.push(loaded);
+            const loaded = bufferToBigInt(code.subarray(programCounter, nextCounter));
+            runState.programCounter = nextCounter;
+            stack.push(loaded);
         },
     ],
     // 0x80: DUP
